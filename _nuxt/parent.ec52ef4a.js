import{q as r,bx as l,p as c,by as f,bz as m,bA as u,bB as d,bC as y,ai as g,bD as _,T as v,bE as b,j as k,af as A,bF as h,a as K,o as x,b as T,bn as w,bw as C}from"./entry.f66f6f67.js";const B=(e,a)=>a.path.replace(/(:\w+)\([^)]+\)/g,"$1").replace(/(:\w+)[?+*]/g,"$1").replace(/:\w+/g,t=>{var n;return((n=e.params[t.slice(1)])==null?void 0:n.toString())||""}),N=(e,a)=>{const t=e.route.matched.find(o=>{var i;return((i=o.components)==null?void 0:i.default)===e.Component.type}),n=a??(t==null?void 0:t.meta.key)??(t&&B(e.route,t));return typeof n=="function"?n(e.route):n},R=(e,a)=>({default:()=>e?r(l,e===!0?{}:e,a):a}),j=c({name:"NuxtPage",inheritAttrs:!1,props:{name:{type:String},transition:{type:[Boolean,Object],default:void 0},keepalive:{type:[Boolean,Object],default:void 0},route:{type:Object},pageKey:{type:[Function,String],default:null}},setup(e,{attrs:a}){const t=f();return()=>r(m,{name:e.name,route:e.route,...a},{default:n=>{if(!n.Component)return;const o=N(n,e.pageKey),i=t.deferHydration(),s=!!(e.transition??n.route.meta.pageTransition??u),p=s&&S([e.transition,n.route.meta.pageTransition,u,{onAfterLeave:()=>{t.callHook("page:transition:finish",n.Component)}}].filter(Boolean));return d(v,s&&p,R(e.keepalive??n.route.meta.keepalive??_,r(y,{onPending:()=>t.callHook("page:start",n.Component),onResolve:()=>{g(()=>t.callHook("page:finish",n.Component).finally(i))}},{default:()=>r(I,{key:o,routeProps:n,pageKey:o,hasTransition:s})}))).default()}})}});function H(e){return Array.isArray(e)?e:e?[e]:[]}function S(e){const a=e.map(t=>({...t,onAfterLeave:H(t.onAfterLeave)}));return b(...a)}const I=c({name:"RouteProvider",props:["routeProps","pageKey","hasTransition"],setup(e){const a=e.pageKey,t=e.routeProps.route,n={};for(const o in e.routeProps.route)n[o]=k(()=>a===e.pageKey?e.routeProps.route[o]:t[o]);return A("_route",h(n)),()=>r(e.routeProps.Component)}}),L={},O=C("h1",null,"I am the parent view",-1);function P(e,a){const t=j;return x(),T("div",null,[O,w(t,{foobar:123})])}const E=K(L,[["render",P]]);export{E as default};
